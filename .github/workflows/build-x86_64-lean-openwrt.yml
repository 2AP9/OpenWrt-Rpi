#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build x86_64 Lean's OpenWrt

on:
  repository_dispatch:
  release:
    types: published
#  push:
#    branches:
#      - main
#    paths:
#      - 'config/lean/x86_64-lean-openwrt.config'
#  schedule:
#    - cron: 0 18 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config/lean/x86_64-lean-openwrt.config
  DEVICE: openwrt-x86-64-generic
  DIY_SH: scripts/lean-openwrt.sh
  SSH_ACTIONS: false
  KMODS_IN_FIRMWARE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
        cd openwrt
        echo "::set-env name=OPENWRTROOT::$PWD"
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        chmod +x $DIY_SH
        cd $OPENWRTROOT
        ../$DIY_SH

    - name: SSH Connection To Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        echo "::set-output name=status::success"

    - name: Set Environment Variable
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "::set-env name=PLATFORM::$PLATFORM"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "::set-env name=TARGET::$TARGET"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "::set-env name=SUBTARGET::$SUBTARGET"
        echo "::set-env name=FIRMWARE::$PWD"

    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots/targets
            cp -r bin/targets/$TARGET files/www/snapshots/targets
            cp ../config/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        fi
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        echo "::set-output name=status::success"  
      
    - name: Upload Combined DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.img
        
    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums

    - name: Organize Files
      id: organize
      if: steps.generate.outputs.status == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        zip -qr dl.zip dl
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        tree -L 1
        gzip *.img
        cd $OPENWRTROOT/bin/targets/$TARGET/
        mkdir -p uefi-images
        mkdir -p legacy-images
        mkdir -p other-files
        mv $SUBTARGET/*combined-efi* uefi-images
        mv $SUBTARGET/*combined* legacy-images
        mv $SUBTARGET/* other-files
        curl -fsSL git.io/file-transfer | sh
        echo "::set-output name=status::success"
